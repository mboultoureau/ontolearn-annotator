// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Locale {
  ENGLISH
  FRENCH
  JAPANESE
}

enum Theme {
  SYSTEM
  LIGHT
  DARK
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locale         Locale           @default(ENGLISH)
  theme          Theme            @default(SYSTEM)
  membersOf      ProjectMember[]
  PlaygroundTask PlaygroundTask[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  icon        String
  projects    Project[]
}

model Project {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String
  image           String?
  visibility      Visibility       @default(PRIVATE)
  categories      Category[]
  data            Data[]
  members         ProjectMember[]
  sources         Source[]
  sourceTypes     SourceType[]
  statistics      Statistics[]
  playgroundTasks PlaygroundTask[]
  tasks           Task[]
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model ProjectMember {
  id        String  @id @default(cuid())
  role      Role    @default(USER)
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

enum Role {
  ADMIN
  USER
}

model Data {
  id         String   @id @default(cuid())
  name       String
  type       DataType @default(TEXT)
  uploadedAt DateTime @default(now())
  content    String?
  preview    String?
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  metadata   Json?
}

enum DataType {
  TEXT
  IMAGE
  DEEP_ZOOM_IMAGE
  FILE
}

enum SourceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Source {
  id           String        @id @default(cuid())
  name         String
  type         SourceType    @relation(fields: [sourceTypeId], references: [id])
  status       SourceStatus  @default(PENDING)
  uploadedAt   DateTime      @default(now())
  project      Project       @relation(fields: [projectId], references: [id])
  projectId    String
  statusInfo   Json?
  sourceTypeId String
  fields       SourceField[]
}

model SourceType {
  id        String            @id @default(cuid())
  name      String
  label     String
  icon      String
  fields    SourceTypeField[]
  project   Project           @relation(fields: [projectId], references: [id])
  projectId String
  sources   Source[]
}

model SourceField {
  id       String          @id @default(cuid())
  source   Source          @relation(fields: [sourceId], references: [id])
  sourceId String
  field    SourceTypeField @relation(fields: [fieldId], references: [id])
  fieldId  String
  value    String
}

model SourceTypeField {
  id           String              @id @default(cuid())
  name         String
  label        String
  type         SourceTypeFieldType
  sourceType   SourceType?         @relation(fields: [sourceTypeId], references: [id])
  sourceTypeId String?
  required     Boolean
  sources      SourceField[]
}

enum SourceTypeFieldType {
  STRING
  FILE
}

model Image {
  id          String @id @default(cuid())
  filePath    String @unique
  previewPath String @unique
}

model Statistics {
  id        String  @id @default(cuid())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  epoch     Int
  loss      Float
  accuracy  Float
}

enum PlaygroundTaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model PlaygroundTask {
  id          String               @id @default(cuid())
  project     Project              @relation(fields: [projectId], references: [id])
  projectId   String
  status      PlaygroundTaskStatus @default(PENDING)
  createdAt   DateTime             @default(now())
  createdBy   User                 @relation(fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime             @updatedAt
  input       Json
  output      Json?
}

enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Task {
  id        String     @id @default(cuid())
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  type      String
  input     Json
  output    Json?
  status    TaskStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
